import { Heading, Flex, Text } from "@radix-ui/themes";
import { ClickableRetex } from "./ClickableRetex";
import { RetexModel } from "../../../model/Retex";
import { DATA_SCIENCE, IUT, DEVOPS, PERSO, WEBDEV, SCRUM, SYSPROG, CRYPTO, SUSTAINABILITY, API, AI, MATH } from "../../../model/Badges";
import terminal from "../../../../public/terminal.png"

const vintrends:RetexModel = {
    name: "Vintrends",
    description: "Insight avanc√© pour resellers",
    logoUrl: "https://vintrends.fr/vintrends.png",
    imageUrl: "https://vintrends.fr/vintrends.png",
    badges: [DATA_SCIENCE, PERSO, DEVOPS],
    paragraph:
    <Text as="p" size="2">
        Vintrends est un outil destin√© aux professionels de la (re)vente sur Vinted.
        Gr√¢ce √† des analyses pouss√©es, un scraping continu des donn√©es du site, et un syst√®me pouss√© de calcul de score d'une niche donn√©e √† partir de plusieurs param√®tres, les utilisateurs de la plateforme disposent d'un insight pouss√© dans ce qu'il est int√©ressant,
        ou non, de revendre sur Vinted.
    </Text>,
    websiteUrl: "https://vintrends.fr/"
}

const ndi:RetexModel = {
    name: "Nuit de l'Info",
    description: "Hackathon en √©quipe",
    logoUrl: "https://www.nuitdelinfo.com/img/logo_n2i_color_moon.svg",
    imageUrl: "https://www.nuitdelinfo.com/materiel_communication/2024/banniere/n2i2024-banner-600x345.png",
    badges: [WEBDEV, SCRUM, DEVOPS, IUT],
    paragraph:
    <Text>
    Lors de la Nuit de l'Info 2024, nous avons eu l'occasion de former une √©quipe de 10 personnes, travaillant et suivant la m√©thodologie Scrum, afin de r√©aliser dans le temps imparti (16h uniquement) une application web fonctionnelle. Le th√®me imparti √©tait celui de la sensibilisation aupr√®s de l'environnement. Nous avons donc choisi de r√©aliser un jeu de gestion coop√©ratif au tour-par-tour, ou le but est de sauver l'√©cosyst√®me du monde qu'on habite gr√¢ce √† diverses mesures.
    <br /><br />
    Nous avons aussi utilis√© des outils comme Docker afin de conteneuriser les diff√©rents modules composant l'application.
    </Text>,
    websiteUrl: "https://nuitdelinfo.com/"
}

const minishell:RetexModel = {
    name: "Minishell",
    description: "R√©alisation d'un Shell en C",
    logoUrl: terminal,
    badges: [SYSPROG,IUT],
    paragraph:
    <Text>
    J'ai r√©alis√© au cours d'une semaine, un prototype visant √† r√©pliquer le fonctionnement du shell dans linux:
     c'est-√†-dire une interface entre l'utilisateur et le hardware. Le programme r√©alisait donc des appels syst√®me comme fork √† la demande de
     l'utilisateur qui interagit via une ligne de commande.
    </Text>,
}

const nixos:RetexModel = {
    name: "NixOS Thinkpad",
    description: "Installation de Linux sur PC de 2011",
    logoUrl: "/public/Nix_Snowflake_Logo.svg",
    imageUrl: "/public/thinkpad.jpg",
    badges: [SYSPROG,PERSO,SUSTAINABILITY],
    paragraph:
    <Text>J'ai achet√© d'occasion un ordinateur portable Thinkpad de 2011. Pour le rendre utilisable en tant que machine de travail, il fallait enlever la version de windows pr√©sente et repartir de 0. apr√®s avoir rachet√© une batterie car l'ancienne √©tait gravement endommag√©e et peu fonctionnelle, j'ai install√© un nouveau syst√®me d'exploitation par dessus, NixOS. NixOS est une distribution gnu/linux, open-source, maintenue par la communaut√©, sp√©ciale pour son approche d√©clarative √† sa configuration; En effet, sur NixOS, il est coutume et n√©cessaire de noter de fa√ßon d√©clarative tous les changements apport√©s √† la configuration initiale. Cela permet une reproducibilit√© et une maintenabilit√© sans √©gal dans l'√©cosyst√®me Linux. Mon but, √† long terme, et d'installer NixOS sur mes autres machines principales afin de profiter d'un environnement de d√©veloppement et de travail uniforme, sur mesure, et reproduisible √† l'infini.
    </Text>,
}

const passwordMan:RetexModel = {
    name: "Password Manager",
    description: "Gestionnaire de mots de passe auto-h√©berg√©",
    logoUrl: "/public/lock-icon_34397.webp",
    badges: [CRYPTO,PERSO,],
    paragraph:
    <Text>
    Lors de ma terminale g√©n√©rale, j'ai d√©cid√© de r√©aliser comme projet final de sp√©cialit√© NSI un gestionnaire de mot de passe, fonctionnement localement, et utilisant des concepts comme le chiffrement asym√©trique pour chiffrer le contenu d'une base de donn√©es de mots de passe, d√©v√©rouillable uniquement gr√¢ce √† la soumission d'un mot de passe ma√Ætre super secret.
    <br /><br />
    Note: l'enti√®ret√© de la logique sous-jacente √† cette application m'a pris 1 week-end √† coder, tandis que l'interface graphique est, quant √† elle, √† ce jour encore incompl√®te. ü§∑‚ôÇÔ∏è 
    </Text>,
}

const pixelWar:RetexModel = {
    name: "Pixel War",
    description: "Cr√©ation d'un site+canvas interactif",
    logoUrl: "/public/64be586406357a4d7f584f89.webp",
    imageUrl: "/public/screen-chasse-tresor-c006cfb1f6cf494d6f82be7956562d5f.png",
    badges: [WEBDEV,API,IUT],
    paragraph:
    <Text>
    Lors de notre premi√®re ann√©e de BUT informatique, nous avons √©t√© charg√© de construire un site web permettant l'affichage de donn√©es r√©cup√©r√©es aupr√®s d'un API distant. En l'occurence, notre professeur avait construit un API permettant aux √©l√®ves de s'affronter sur un canvas virtuel, jeu librement inspir√© de la Pixel War sur le subreddit r/place. J'ai eu l'occasion de perfectionner mes capacit√©s √† comprendre, int√©ragir avec, et mettre en page les informations d'un API RESTful. 
<br /><br />
    Bonus: La consigne initiale √©tait simplement de construire une interface gr√¢ce √† laquelle il √©tait possible de voir, et modifier un canvas interactif. 
    <br /><br />Avec un <a href="https://rodolphent.github.io/" target="_blank">ami</a>, nous nous sommes charg√©s de construire plusieurs outils, notamment un programme permettant de traduire n'importe quelle image de n'importe quelle dimension en matrice de pixels, pouvant ensuite √™tre fournie √† notre deuxi√®me programme, servant quant √† lui √† automatiquement placer des pixels en utilisant autant de comptes diff√©rents que nous lui fournissions. üòâ
    </Text>,
}

const votator:RetexModel = {
    name: "Votator",
    description: "Cr√©ation d'un frontend interactif en React",
    logoUrl: "/public/Logo_vote.svg",
    badges: [WEBDEV,API,IUT],
    paragraph:
    <Text>
    Au cours de ma 2e ann√©e de BUT informatique, afin d'apprendre le d√©veloppement web par composants, j'ai du construire le front-end (comprenez: la facade) d'une application web permettant de participer √† des concours d'opinion. Comme dans le cas de mon projet pixel war (lien), la logique de fonctionnement des tournois √©tait d√©j√† r√©alis√©e dans un API RESTful distant, con√ßu par nos professeurs. Le but √©tait de mettre en page et rendre interactive ces donn√©es via une interface web par composants.
<br /><br />
Le webdev orient√© composants est une fa√ßon de concevoir des interfaces qui permet la r√©utilisation de "morceaux d'interfaces" (composants) comme un bouton, un formulaire, une barre de navigation, une page enti√®re, etc, afin d'obtenir des bouts g√©n√©riques de code et de faciliter l'uniformit√© d'une application, tout en minimisant la redondance de r√©√©crire plusieurs fois un m√™me √©l√©ment d'interface.
    </Text>,
}

const chatroom:RetexModel = {
    name: "Tchat en direct",
    description: "Messagerie en direct",
    logoUrl: "/public/134914.png",
    imageUrl: "/public/Screenshot_2025-05-06_07-19-58.png",
    badges: [WEBDEV,PERSO],
    websiteUrl: "https://github.com/labian0/chat-example",
    paragraph:
    <Text>
    Lors de mon ann√©e de 1ere g√©n√©rale, j'ai eu l'occasion comme projet de fin d'ann√©e de sp√©cialit√© NSI de r√©aliser un site web compl√®tement auto-h√©berg√© (sur un raspberry pi 3 √† la maison), permettant la discussion entre plusieurs personnes dans un tchat en direct. J'ai utilis√© des technologies de websockets pour permettre une connexion et un √©change de donn√©es bidirectionnels entre client et serveur.
<br /><br />
Le probl√®me avec les m√©thodes habituelles de communication entre un client (votre ordinateur) et un serveur (l'ordinateur distant h√©bergeant le site web auquel vous vous connectez), souvent passant par les requ√™tes HTTP, et que le serveur ne peut pas spontan√©ment pr√©venir le client d'un √©v√®nement: en effet, il est n√©cessaire que le client "pose une question", pour que le serveur lui r√©ponde. Dans le cas d'une messagerie en direct, il faut que lorsque Alice envoie un message, il puisse √™tre affich√© sur l'ordinateur de Bob. Avec des requ√™tes traditionnelles, il faudrait donc que Bob envoie r√©guli√®rement (par exemple, toutes les secondes) une requ√™te demandant au serveur, "est-ce que de nouveaux messages ont √©t√© post√©s?". Cette fa√ßon de faire est tr√®s inneficace, et il est pr√©f√©rable d'utiliser une technologie permettant une connexion bidirectionnelle, ou le serveur et le client vont initier leur conversation par un "handshake", √©tablissant la connexion entre les deux parties. Ensuite, chacun des deux p√©riph√©riques peut spontan√©ment notifier l'autre d'un √©v√®nement (par exemple, le client peut envoyer un message au serveur, et le serveur, une fois qu'il re√ßoit un message d'un client, peut envoyer une notification √† tous les autres membres de la conversation).
</Text>,
}

const towa:RetexModel = {
    name: "Towa",
    description: "Participation √† un tournoi d'IA",
    logoUrl: "/public/towa.png",
    imageUrl: "/public/towa.png",
    badges: [AI,IUT,MATH],
    paragraph:
    <Text>
    Au cours de ma premi√®re ann√©e de BUT informatique, j'ai eu l'occasion de d√©velopper une intelligence artificielle charg√©e de gagner √† un jeu de plateau. Le jeu de plateau √©tait constituait de plusieurs r√®gles, que nous avions du dans un premier temps impl√©menter nous-m√™mes. Dans la seconde phase de ce projet donc, une comp√©tition avait lieu chaque nuit entre les diff√©rents algorithmes d'IA que chacun avait soumis, afin de d√©terminer quelle strat√©gie √©tait la meilleure. J'ai personnellement fini 5e du classement de la promotion, gr√¢ce √† un algorithme permettant de trouver le meilleur coup possible en terme de changement de score b√©n√©fique, sur le tour actuel.
<br /><br />
Le probl√®me principal avec mon approche est que l'algorithme utilis√© avait une profondeur de 1, c'est-√†-dire qu'il √©tait incapable de simuler la conitnuation de la partie apr√®s le coup √©tudi√©, afin de voir si un coup potentiellement moins avantageux tout de suite pouvait √™tre plus utile sur le long terme. Ayant r√©alis√© ce d√©faut assez t√¥t, j'ai eu le temps de modifier mon algorithme pour qu'il puisse planifier sur 2, voire 3 tours. Cependant, une partie durant au maximum 40 tours, cette profondeur n'√©tait pas suffisante. √Ä cause d'une limite de temps imparti √† chaque tour (d'environ 2 secondes pour jouer), il n'est pas possible de calculer toutes les √©ventualit√©s, car cela prendrait un temps faramineux d√®s que l'on atteint une profondeur cons√©quente. Il est donc avis√© d'"√©laguer" l'arbre des possibilit√©s via des algorithmes qui font le juste milieu entre rapides et exhaustifs, comme "A*" (dit "A-Star")</Text>,
}


const graphs:RetexModel = {
    name: "Visualisation de Graphes",
    description: "Application pour visualiser et manipuler des graphes",
    logoUrl: "/public/Graph_betweenness.svg",
    imageUrl: "/public/graph2.png",
    badges: [MATH,IUT,DATA_SCIENCE],
    paragraph:
    <Text>
    J'ai √©t√© charg√© de construire une application Java avec javafx permettant de visualiser et modifier des graphes. J'ai du impl√©menter des algorithmes sur les graphes, comme l'algorithme de Prim, ou encore celui de Dijkstra. Apr√®s avoir pass√© plusieurs heures de cours th√©oriques sur les graphes, cette application r√©elle des m√©thodes apprises pour simplifier, modifier, et parcourir des graphes me permit d'en apprendre plus sur cette discipline tr√®s large.
    </Text>,
}



export const RetexSection = () => {
    

    return (
        <>
        <Heading>Mes Projets</Heading>
        <Heading as="h4" size="2" weight="regular">(Cliquez!)</Heading>

        <Flex direction="row" gap={{initial:"2",md:"5"}} wrap="wrap" justify="center">
        <ClickableRetex retex={vintrends}/>
        <ClickableRetex retex={ndi}/>
        <ClickableRetex retex={minishell}/>
        <ClickableRetex retex={nixos}/>
        <ClickableRetex retex={pixelWar}/>
        <ClickableRetex retex={passwordMan}/>
        <ClickableRetex retex={chatroom}/>
        <ClickableRetex retex={votator}/>
        <ClickableRetex retex={graphs}/>
        <ClickableRetex retex={towa}/>

        </Flex>
        </>
    );
}